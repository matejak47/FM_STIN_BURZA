package com.example.burza.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class TradeResultTest {

    private TradeResult tradeResult;

    @BeforeEach
    public void setUp() {
        // Create a TradeResult instance using the all-args constructor
        tradeResult = new TradeResult(true, "Trade successful", 150.0, 1000.0, 5000.0);
    }

    @Test
    public void testConstructorAndGetters() {
        // Verify the values set by the constructor are correct
        assertTrue(tradeResult.isSuccess(), "Success should be true");
        assertEquals("Trade successful", tradeResult.getMessage(), "Message should be 'Trade successful'");
        assertEquals(150.0, tradeResult.getExecutedPrice(), "Executed price should be 150.0");
        assertEquals(1000.0, tradeResult.getTotalCost(), "Total cost should be 1000.0");
        assertEquals(5000.0, tradeResult.getRemainingBalance(), "Remaining balance should be 5000.0");
    }

    @Test
    public void testDefaultConstructor() {
        // Create a TradeResult instance using the default constructor
        TradeResult defaultTradeResult = new TradeResult(false, null, 0.0, 0.0, 0.0);

        // Verify the default values
        assertFalse(defaultTradeResult.isSuccess(), "Default success should be false");
        assertNull(defaultTradeResult.getMessage(), "Default message should be null");
        assertEquals(0.0, defaultTradeResult.getExecutedPrice(), "Default executed price should be 0.0");
        assertEquals(0.0, defaultTradeResult.getTotalCost(), "Default total cost should be 0.0");
        assertEquals(0.0, defaultTradeResult.getRemainingBalance(), "Default remaining balance should be 0.0");
    }

    @Test
    public void testSetters() {
        // Modify the trade result using setters
        tradeResult.setSuccess(false);
        tradeResult.setMessage("Trade failed");
        tradeResult.setExecutedPrice(140.0);
        tradeResult.setTotalCost(1200.0);
        tradeResult.setRemainingBalance(4000.0);

        // Verify that the setter methods work correctly
        assertFalse(tradeResult.isSuccess(), "Success should be false after setter");
        assertEquals("Trade failed", tradeResult.getMessage(), "Message should be 'Trade failed' after setter");
        assertEquals(140.0, tradeResult.getExecutedPrice(), "Executed price should be 140.0 after setter");
        assertEquals(1200.0, tradeResult.getTotalCost(), "Total cost should be 1200.0 after setter");
        assertEquals(4000.0, tradeResult.getRemainingBalance(), "Remaining balance should be 4000.0 after setter");
    }

    @Test
    public void testToString() {
        // Test the toString method generated by Lombok
        String expectedToString = "TradeResult(success=true, message=Trade successful, executedPrice=150.0, totalCost=1000.0, remainingBalance=5000.0)";
        assertEquals(expectedToString, tradeResult.toString(), "The toString method should match the expected format");
    }

    @Test
    public void testEqualsAndHashCode() {
        // Create another TradeResult with the same values
        TradeResult anotherTradeResult = new TradeResult(true, "Trade successful", 150.0, 1000.0, 5000.0);

        // Verify that two TradeResult objects with the same values are considered equal
        assertEquals(tradeResult, anotherTradeResult, "Two TradeResults with the same values should be equal");

        // Verify that the hash codes of the two objects are equal
        assertEquals(tradeResult.hashCode(), anotherTradeResult.hashCode(), "Hash codes should be the same for equal objects");
    }
}
