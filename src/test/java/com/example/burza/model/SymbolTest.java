package com.example.burza.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class SymbolTest {

    private Symbol symbol;

    @BeforeEach
    public void setUp() {
        symbol = new Symbol(); // Initialize Symbol before each test
    }

    @Test
    public void testGettersAndSetters() {
        // Set properties using the setters
        symbol.setSymbol("AAPL");
        symbol.setName("Apple Inc.");

        // Test the getters
        assertEquals("AAPL", symbol.getSymbol(), "Symbol should be 'AAPL'");
        assertEquals("Apple Inc.", symbol.getName(), "Name should be 'Apple Inc.'");
    }

    @Test
    public void testAllArgsConstructor() {
        // Test the AllArgsConstructor
        Symbol symbol = new Symbol("AAPL", "Apple Inc.");

        // Test that the values are set correctly through the constructor
        assertEquals("AAPL", symbol.getSymbol(), "Symbol should be 'AAPL'");
        assertEquals("Apple Inc.", symbol.getName(), "Name should be 'Apple Inc.'");
    }

    @Test
    public void testNoArgsConstructor() {
        // Test the NoArgsConstructor
        Symbol symbol = new Symbol();

        // The default values should be null
        assertNull(symbol.getSymbol(), "Symbol should be null by default");
        assertNull(symbol.getName(), "Name should be null by default");
    }

    @Test
    public void testEqualsAndHashCode() {
        // Test equals and hashCode generated by Lombok
        Symbol symbol1 = new Symbol("AAPL", "Apple Inc.");
        Symbol symbol2 = new Symbol("AAPL", "Apple Inc.");
        Symbol symbol3 = new Symbol("GOOG", "Google");

        // Assert that two objects with the same values are equal
        assertEquals(symbol1, symbol2, "Symbols with the same values should be equal");

        // Assert that objects with different values are not equal
        assertNotEquals(symbol1, symbol3, "Symbols with different values should not be equal");

        // Assert hash codes are equal for equal objects
        assertEquals(symbol1.hashCode(), symbol2.hashCode(), "Hash codes should be the same for equal objects");
    }

    @Test
    public void testToString() {
        // Test the toString method generated by Lombok
        Symbol symbol = new Symbol("AAPL", "Apple Inc.");
        String expectedToString = "Symbol(symbol=AAPL, name=Apple Inc.)";
        assertEquals(expectedToString, symbol.toString(), "The toString method should match the expected format");
    }
}
